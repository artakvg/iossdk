//
//  RestClient.m
//  ForkizeLib
//
//  Created by Artak on 9/16/15.
//  Copyright (c) 2015 Artak. All rights reserved.
//

#import "RestClient.h"
#import "LocalStorageManager.h"

#import "ForkizeConfig.h"
#import "ForkizeHelper.h"
#import "ForkizeInstance.h"

#import "Request.h"
#import "SessionInstance.h"
#import "UserProfile.h"
#import "FZEvent.h"
#import "FZUser.h"

@interface FzRestOperation : NSOperation{
    
  }

-(instancetype) initWithRequest:(Request *) request andLocalStorage:(LocalStorageManager *) localStorage andAccessToken:(NSString *) accessToken;

@property (nonatomic, assign) NSInteger aliased;
@property (nonatomic, strong) NSString *accessToken;
@property (nonatomic, strong) Request *request;
@property (nonatomic, strong) LocalStorageManager * localStorage;


@end

@implementation FzRestOperation

-(instancetype) initWithRequest:(Request *) request andLocalStorage:(LocalStorageManager *) localStorage andAccessToken:(NSString *) accessToken{
    self = [super init];
    
    if (self) {
        self.request = request;
        self.localStorage = localStorage;
        self.accessToken = accessToken;
    }
    
    return self;
}

- (void)main {
    
    @autoreleasepool {
        if (self.accessToken == nil) {
            self.accessToken = [self.request getAccessToken];
        }
        
        
        NSArray *eventArray = [self.localStorage getEvents:[ForkizeConfig getInstance].maxEventsPerFlush];
        NSInteger lastEventsCount = [eventArray count];
        
        if (lastEventsCount == 0) {
            return;
        }
        
        NSMutableArray *arrayData = [NSMutableArray array];
        
        for (FZEvent *event in eventArray) {
            NSError *parseError = nil;
           
            NSData *data = [event.eventValue dataUsingEncoding:NSUTF8StringEncoding];
            id jsonObject = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&parseError];
            
            [arrayData addObject:jsonObject];
        }
        
        
        NSError *error;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:arrayData options:NSJSONWritingPrettyPrinted error:&error];
        
        NSMutableString *jsonString = [[NSMutableString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        [jsonString replaceOccurrencesOfString:@"\n" withString:@"" options:NSBackwardsSearch range:NSMakeRange(0,[jsonString length] - 1)];
        [jsonString replaceOccurrencesOfString:@" " withString:@"" options:NSBackwardsSearch range:NSMakeRange(0,[jsonString length] - 1)];

        NSString *hashableString = [NSString stringWithFormat:@"%@=%@=%@=%@=%@=%@",
                                   [ForkizeConfig getInstance].appId,
                                   [[[ForkizeInstance getInstance] getUserProfile] getUserId],
                                   @"ios",
                                   [ForkizeConfig getInstance].sdkVersion,
                                   [ForkizeConfig getInstance].appKey,
                                    jsonString];
        
        NSString *hash = [ForkizeHelper md5:hashableString];
 
        NSLog(@"Hashable string: %@ \n hash: %@", hashableString, hash);
        
        NSMutableDictionary *batchDict = [NSMutableDictionary dictionary];
        [batchDict setObject:arrayData forKey:@"api_data"];
        [batchDict setValue:[ForkizeConfig getInstance].appId forKey:@"app_id"];
        [batchDict setValue:[[[ForkizeInstance getInstance] getUserProfile] getUserId] forKey:@"user_id"];
        [batchDict setObject:@"ios" forKey:@"sdk"];
        [batchDict setObject:[[ForkizeConfig getInstance] sdkVersion] forKey:@"version"];
        [batchDict setObject:self.accessToken forKey:@"access_token"];
        [batchDict setObject:hash forKey:@"hash"];
        // [batchDict setObject:[NSString stringWithFormat:@"%ld", (long)[[NSDate date] timeIntervalSince1970]] forKey:@"stamp"];
        
        
        NSData *jsonBatchData = [NSJSONSerialization dataWithJSONObject:batchDict options:NSJSONWritingPrettyPrinted error:&error];
        NSString *batchStringJSon = [[NSString alloc] initWithData:jsonBatchData encoding:NSUTF8StringEncoding];
   
        NSLog(@"Forkize SDK accessToken %@", self.accessToken);
        
        NSMutableString *reqData = [NSMutableString stringWithString:batchStringJSon];
        [reqData replaceOccurrencesOfString:@" " withString:@"" options:NSLiteralSearch range:NSMakeRange(0, [reqData length])];
        [reqData replaceOccurrencesOfString:@"\n" withString:@"" options:NSLiteralSearch range:NSMakeRange(0, [reqData length])];
        
        NSInteger responseCode = [self.request postWithBody:reqData];
        if (responseCode == 1) {
            [self.localStorage removeEvents:eventArray];
        } else if (responseCode == 2){
            self.accessToken = nil;
        }
    }
}

@end

@interface RestClient()

@property (nonatomic, strong) LocalStorageManager *localStorage;
@property (nonatomic, strong) Request *request;
@property (nonatomic, strong) NSString *accessToken;
@property (nonatomic, assign) NSInteger aliased;

@property (nonatomic, strong) NSOperationQueue *queue;

@end

@implementation RestClient


-(instancetype) init{
    self = [super init];
    if (self) {
        self.request = [[Request alloc] init];
        self.queue = [[NSOperationQueue alloc] init];
        self.queue.name = @"Forkize Lib Rest Queue";
        self.queue.maxConcurrentOperationCount = 1;
    }
    return self;
}

-(void) setStorage:(LocalStorageManager*) manager{
    self.localStorage = manager;
}

-(void) close{
    [self.queue cancelAllOperations];
    self.queue = nil;
}

// 0 - unknown
//1 - exist
// 2 - not exist

-(void) flush{
    @try {
        if (self.queue == nil) {
            NSLog(@"Forkize SDK Trying to schedule a rest client execution while shutdown");
        } else {
            [self.queue addOperationWithBlock:^{
                if (self.accessToken == nil) {
                    self.accessToken = [self.request getAccessToken];
                    [self updateUserProfile:self.accessToken];
                    
                }
                
                if ([ForkizeConfig getInstance].aliased == 0) {
                    FZUser * user = [self.localStorage getAliasedUser:[[[ForkizeInstance getInstance] getUserProfile] getUserId]];
                    if ([ForkizeHelper isNilOrEmpty:user.aliasedName]) {
                        [[ForkizeConfig getInstance] setAliased:2];
                    } else {
                        [[ForkizeConfig getInstance] setAliased:1];
                    }
                }
                
                if ([ForkizeConfig getInstance].aliased == 1) {
                    FZUser *newUser = [self.localStorage getAliasedUser:[[[ForkizeInstance getInstance] getUserProfile] getUserId]];
                    if ([self.request postAlias:newUser andAccessToken:self.accessToken]) {
                        [self.localStorage flushToDatabase];
                        [self.localStorage exchangeIds:[[[ForkizeInstance getInstance] getUserProfile] getUserId]];
                    
                        [[ForkizeConfig getInstance] setAliased:2];
                        
                
                    }
                }
            }];
            
            [self.queue addOperation:[[FzRestOperation alloc] initWithRequest:self.request andLocalStorage:self.localStorage andAccessToken:self.accessToken]];
        }
    } @catch (NSException *exception) {
        NSLog(@"Forkize SDK Error while scheduling a rest client execution %@", exception);
    }
}

-(void) dropAccessToken{
    self.accessToken = nil;
}

-(void) getAccessToken {
    @try {
        if (self.queue == nil) {
            NSLog(@"Forkize SDK Trying to schedule a rest client execution while shutdown");
        } else {
            [self.queue addOperationWithBlock:^{
                self.accessToken = [self.request getAccessToken];
            }];
        }
    } @catch (NSException *exception) {
        NSLog(@"Forkize SDK Error while scheduling a rest client execution %@", exception);
    }
}

-(void) updateUserProfile:(NSString *) token{
    @try {
        if (self.queue == nil) {
             NSLog(@"Forkize SDK Trying to schedule a rest client execution while shutdown");
        } else {
            [self.queue addOperationWithBlock:^{
                if ([self.request  updateUserProfile:token]){
                     [[[ForkizeInstance getInstance] getUserProfile] dropChangeLog];
                }
            }];
        }
    } @catch (NSException *exception) {
        NSLog(@"Forkize SDK Error while scheduling a rest client execution %@", exception);
    }
}


@end
